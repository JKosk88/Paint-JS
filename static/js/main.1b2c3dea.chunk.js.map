{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","size","setSize","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","fillWithColor","color","fillStyle","fillRect","className","onChange","e","target","value","type","name","onDoubleClick","icon","faPlus","onClick","faMinus","newSize","faEraser","clearRect","faSwatchbook","globalCompositeOperation","globalAlpha","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b2c3dea.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus, faEraser, faSwatchbook } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  \n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [size, setSize] = useState(25);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = (window.innerWidth - 100) * 2;\n    canvas.height = (window.innerHeight - 200) * 2;\n\n    canvas.style.width = `${window.innerWidth - 100}px`;\n    canvas.style.height = `${window.innerHeight - 200}px`;\n\n    const context = canvas.getContext('2d');\n    context.scale(2,2);\n    context.lineCap = 'round';\n    context.strokeStyle = `rgb(0, 0, 0)`;\n    context.lineWidth = 25;\n    contextRef.current = context;\n\n    fillWithColor('white');\n  }, [])\n\n  const startDrawing = ({nativeEvent}) => {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  }\n\n  const finishDrwawing = () => {\n    contextRef.current.closePath()\n    setIsDrawing(false);\n  }\n\n  const  draw = ({nativeEvent}) => {\n    if(!isDrawing){\n      return;\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  }\n\n  const inceraseBrushSize = () => {\n    canvasRef.current.getContext('2d').lineWidth = size + 10;\n    setSize(size + 10);\n  }\n  \n  const deceraseBrushSize = () => {\n    let newSize;\n    if (size - 10 < 5){\n      newSize = 5;\n    } else {\n      newSize = size - 10;\n    }\n    canvasRef.current.getContext('2d').lineWidth = newSize;\n    setSize(newSize);\n  }\n\n  const clear = () => {\n    canvasRef.current.getContext('2d').clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  }\n\n  const changeColor = (e) => {\n    canvasRef.current.getContext('2d').strokeStyle = e.target.value;\n  }\n\n  const invertImage = () => {\n    canvasRef.current.getContext('2d').globalCompositeOperation='difference';\n    canvasRef.current.getContext('2d').fillStyle = \"white\";\n    canvasRef.current.getContext('2d').globalAlpha = 1;\n    canvasRef.current.getContext('2d').fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  }\n\n  const changeBrush = (e) => {\n    canvasRef.current.getContext('2d').lineCap = e.target.value;\n  }\n\n  const fillWithColor = (color) => {\n    canvasRef.current.getContext('2d').fillStyle = color;\n    canvasRef.current.getContext('2d').fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  }\n\n  return (\n    <div className='App'>\n      <div className='panel'>\n\n        <form onChange={changeBrush}>\n          <label className=\"container\">\n            <input type=\"radio\" name='brush' value='square' />\n            <span className=\"checkmark square\" ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='brush' value ='round' />\n            <span className=\"checkmark round\"></span>\n          </label>\n        </form>\n        \n        <form onChange={changeColor}>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value='rgb(255, 0, 55)' />\n            <span className=\"checkmark red\" onDoubleClick={() => fillWithColor('rgb(255, 0, 55)')} value='das'></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value ='rgb(255, 230, 0)' />\n            <span className=\"checkmark yellow\" onDoubleClick={() => fillWithColor('rgb(255, 230, 0)')}></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value='rgb(38, 185, 38)' />\n            <span className=\"checkmark green\" onDoubleClick={() => fillWithColor('rgb(38, 185, 38)')}></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value='rgb(0, 174, 255)' />\n            <span className=\"checkmark blue\" onDoubleClick={() => fillWithColor('rgb(0, 174, 255)')}></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value='rgb(0, 0, 0)' />\n            <span className=\"checkmark black\" onDoubleClick={() => fillWithColor('rgb(0, 0, 0)')}></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name='color' value='rgb(255, 255, 255)' />\n            <span className=\"checkmark white\" onDoubleClick={() => fillWithColor('rgb(255, 255, 255)')}></span>\n          </label>\n        </form>\n        \n        <FontAwesomeIcon icon={faPlus} className='fa-2x' onClick={inceraseBrushSize}/>\n        <span className='fa-3x noselect'> {size} </span>\n        <FontAwesomeIcon icon={faMinus} className='fa-2x' onClick={deceraseBrushSize}/>\n        <FontAwesomeIcon icon={faEraser} className='fa-2x' onClick={clear}/>\n        <FontAwesomeIcon icon={faSwatchbook} className='fa-2x' onClick={invertImage}/>\n      </div>\n      \n      <canvas \n      onMouseDown={startDrawing}\n      onMouseUp={finishDrwawing}\n      onMouseMove={draw}\n      ref={canvasRef}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}