{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","size","setSize","isDrawingLine","setIsDrawingLine","lineX","setLineX","lineY","setLineY","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","fillWithColor","color","fillStyle","fillRect","className","onChange","e","target","value","type","name","onDoubleClick","icon","faPlus","onClick","faMinus","newSize","faEraser","clearRect","faSwatchbook","globalCompositeOperation","globalAlpha","id","faPencilRuler","document","getElementById","classList","remove","add","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","lineTo","stroke","closePath","onMouseMove","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e11e85ab.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlus,\n  faMinus,\n  faEraser,\n  faSwatchbook,\n  faPencilRuler,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [size, setSize] = useState(25);\n  const [isDrawingLine, setIsDrawingLine] = useState(false);\n  const [lineX, setLineX] = useState(0);\n  const [lineY, setLineY] = useState(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = (window.innerWidth - 100) * 2;\n    canvas.height = (window.innerHeight - 200) * 2;\n\n    canvas.style.width = `${window.innerWidth - 100}px`;\n    canvas.style.height = `${window.innerHeight - 200}px`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = `rgb(0, 0, 0)`;\n    context.lineWidth = 25;\n    contextRef.current = context;\n\n    fillWithColor(\"white\");\n  }, []);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    if (isDrawingLine) {\n      setLineX(offsetX);\n      setLineY(offsetY);\n      return;\n    }\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrwawing = ({ nativeEvent }) => {\n    if (isDrawingLine) {\n      const { offsetX, offsetY } = nativeEvent;\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(lineX, lineY);\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n      return;\n    }\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const inceraseBrushSize = () => {\n    canvasRef.current.getContext(\"2d\").lineWidth = size + 10;\n    setSize(size + 10);\n  };\n\n  const deceraseBrushSize = () => {\n    let newSize;\n    if (size - 10 < 5) {\n      newSize = 5;\n    } else {\n      newSize = size - 10;\n    }\n    canvasRef.current.getContext(\"2d\").lineWidth = newSize;\n    setSize(newSize);\n  };\n\n  const clear = () => {\n    canvasRef.current\n      .getContext(\"2d\")\n      .clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n\n  const changeColor = (e) => {\n    canvasRef.current.getContext(\"2d\").strokeStyle = e.target.value;\n  };\n\n  const invertImage = () => {\n    canvasRef.current.getContext(\"2d\").globalCompositeOperation = \"difference\";\n    canvasRef.current.getContext(\"2d\").fillStyle = \"white\";\n    canvasRef.current.getContext(\"2d\").globalAlpha = 1;\n    canvasRef.current\n      .getContext(\"2d\")\n      .fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n\n  const changeBrush = (e) => {\n    canvasRef.current.getContext(\"2d\").lineCap = e.target.value;\n  };\n\n  const fillWithColor = (color) => {\n    canvasRef.current.getContext(\"2d\").fillStyle = color;\n    canvasRef.current\n      .getContext(\"2d\")\n      .fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"panel\">\n        <form onChange={changeBrush}>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"brush\" value=\"square\" />\n            <span className=\"checkmark square\"></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"brush\" value=\"round\" />\n            <span className=\"checkmark round\"></span>\n          </label>\n        </form>\n\n        <form onChange={changeColor}>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(255, 0, 55)\" />\n            <span\n              className=\"checkmark red\"\n              onDoubleClick={() => fillWithColor(\"rgb(255, 0, 55)\")}\n              value=\"das\"\n            ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(255, 230, 0)\" />\n            <span\n              className=\"checkmark yellow\"\n              onDoubleClick={() => fillWithColor(\"rgb(255, 230, 0)\")}\n            ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(38, 185, 38)\" />\n            <span\n              className=\"checkmark green\"\n              onDoubleClick={() => fillWithColor(\"rgb(38, 185, 38)\")}\n            ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(0, 174, 255)\" />\n            <span\n              className=\"checkmark blue\"\n              onDoubleClick={() => fillWithColor(\"rgb(0, 174, 255)\")}\n            ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(0, 0, 0)\" />\n            <span\n              className=\"checkmark black\"\n              onDoubleClick={() => fillWithColor(\"rgb(0, 0, 0)\")}\n            ></span>\n          </label>\n          <label className=\"container\">\n            <input type=\"radio\" name=\"color\" value=\"rgb(255, 255, 255)\" />\n            <span\n              className=\"checkmark white\"\n              onDoubleClick={() => fillWithColor(\"rgb(255, 255, 255)\")}\n            ></span>\n          </label>\n        </form>\n\n        <FontAwesomeIcon\n          icon={faPlus}\n          className=\"fa-2x\"\n          onClick={inceraseBrushSize}\n        />\n        <span className=\"fa-3x noselect\"> {size} </span>\n        <FontAwesomeIcon\n          icon={faMinus}\n          className=\"fa-2x\"\n          onClick={deceraseBrushSize}\n        />\n        <FontAwesomeIcon icon={faEraser} className=\"fa-2x\" onClick={clear} />\n        <FontAwesomeIcon\n          icon={faSwatchbook}\n          className=\"fa-2x\"\n          onClick={invertImage}\n        />\n        <FontAwesomeIcon\n          id=\"line\"\n          icon={faPencilRuler}\n          className=\"fa-2x\"\n          onClick={() => {\n            if (isDrawingLine) {\n              setIsDrawingLine(false);\n              let element = document.getElementById(\"line\");\n              element.classList.remove(\"line\");\n            } else {\n              setIsDrawingLine(true);\n              let element = document.getElementById(\"line\");\n              element.classList.add(\"line\");\n            }\n          }}\n        />\n      </div>\n\n      <canvas\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrwawing}\n        onMouseMove={draw}\n        ref={canvasRef}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}